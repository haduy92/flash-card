using EnglishClass.Common.Extensions;

namespace EnglishClass.Domain.Entities.Histories;

public class EntityPropertyChange
{

    /// <summary>
    /// Maximum length of <see cref="NewValue"/> and <see cref="OriginalValue"/> properties.
    /// Value: 512.
    /// </summary>
    public const int MaxValueLength = 512;

    /// <summary>
    /// EntityChangeId.
    /// </summary>
    public long EntityChangeId { get; set; }

    /// <summary>
    /// NewValue. Use <see cref="SetNewValue"/> to change value
    /// </summary>
    public required string NewValue { get; set; }

    /// <summary>
    /// OriginalValue. Use <see cref="SetOriginalValue"/> to change value
    /// </summary>
    public required string OriginalValue { get; set; }

    /// <summary>
    /// PropertyName.
    /// </summary>
    public required string PropertyName { get; set; }

    /// <summary>
    /// Type of the JSON serialized <see cref="NewValue"/> and <see cref="OriginalValue"/>.
    /// It's the FullName of the type.
    /// </summary>
    public required string PropertyTypeFullName { get; set; }

    /// <summary>
    /// Hash of new value, auto-generated by <see cref="SetNewValue"/>, used compare changes.
    /// </summary>
    public required string NewValueHash { get; set; }

    /// <summary>
    /// Hash of original value, auto-generated by <see cref="SetOriginalValue"/>, used compare changes.
    /// </summary>
    public required string OriginalValueHash { get; set; }

    /// <summary>
    /// Use to set NewValue. (Also fills <see cref="NewValueHash"/> according to <paramref name="newValue"/>)
    /// </summary>
    public virtual void SetNewValue(string newValue)
    {
        NewValueHash = newValue?.ToMd5() ?? string.Empty;
        NewValue = newValue?.TruncateWithPostfix(MaxValueLength) ?? string.Empty;
    }

    /// <summary>
    /// Use to set original value. (Also fills <see cref="OriginalValueHash"/> according to <paramref name="originalValue"/>)
    /// </summary>
    public virtual void SetOriginalValue(string originalValue)
    {
        OriginalValueHash = originalValue?.ToMd5() ?? string.Empty;
        OriginalValue = originalValue?.TruncateWithPostfix(MaxValueLength) ?? string.Empty;
    }

    /// <summary>
    /// Returns if NewValue and OriginalValue are equal. Uses hash to compare, if <see cref="NewValueHash"/> and <see cref="OriginalValueHash"/> are not null or empty.
    /// </summary>
    public virtual bool IsValuesEquals()
    {
        //To support previous data
        if (!NewValueHash.IsNullOrWhiteSpace() && !OriginalValueHash.IsNullOrWhiteSpace())
        {
            return NewValueHash == OriginalValueHash;
        }

        return NewValue == OriginalValue;
    }
}
